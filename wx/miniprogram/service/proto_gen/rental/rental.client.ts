// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "rental.proto" (package "rental.v1", syntax proto3)
// tslint:disable
import { ProfileService } from "./rental";
import type { ClearProfileRequest } from "./rental";
import type { Identity } from "./rental";
import type { Profile } from "./rental";
import type { GetProfileRequest } from "./rental";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TripService } from "./rental";
import type { UpdateTripRequest } from "./rental";
import type { GetTripsResponse } from "./rental";
import type { GetTripsRequest } from "./rental";
import type { Trip } from "./rental";
import type { GetTripRequest } from "./rental";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TripEntity } from "./rental";
import type { CreateTripRequest } from "./rental";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service rental.v1.TripService
 */
export interface ITripServiceClient {
    /**
     * @generated from protobuf rpc: CreateTrip(rental.v1.CreateTripRequest) returns (rental.v1.TripEntity);
     */
    createTrip(input: CreateTripRequest, options?: RpcOptions): UnaryCall<CreateTripRequest, TripEntity>;
    /**
     * @generated from protobuf rpc: GetTrip(rental.v1.GetTripRequest) returns (rental.v1.Trip);
     */
    getTrip(input: GetTripRequest, options?: RpcOptions): UnaryCall<GetTripRequest, Trip>;
    /**
     * @generated from protobuf rpc: GetTrips(rental.v1.GetTripsRequest) returns (rental.v1.GetTripsResponse);
     */
    getTrips(input: GetTripsRequest, options?: RpcOptions): UnaryCall<GetTripsRequest, GetTripsResponse>;
    /**
     * @generated from protobuf rpc: UpdateTrip(rental.v1.UpdateTripRequest) returns (rental.v1.Trip);
     */
    updateTrip(input: UpdateTripRequest, options?: RpcOptions): UnaryCall<UpdateTripRequest, Trip>;
}
/**
 * @generated from protobuf service rental.v1.TripService
 */
export class TripServiceClient implements ITripServiceClient, ServiceInfo {
    typeName = TripService.typeName;
    methods = TripService.methods;
    options = TripService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateTrip(rental.v1.CreateTripRequest) returns (rental.v1.TripEntity);
     */
    createTrip(input: CreateTripRequest, options?: RpcOptions): UnaryCall<CreateTripRequest, TripEntity> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateTripRequest, TripEntity>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTrip(rental.v1.GetTripRequest) returns (rental.v1.Trip);
     */
    getTrip(input: GetTripRequest, options?: RpcOptions): UnaryCall<GetTripRequest, Trip> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTripRequest, Trip>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTrips(rental.v1.GetTripsRequest) returns (rental.v1.GetTripsResponse);
     */
    getTrips(input: GetTripsRequest, options?: RpcOptions): UnaryCall<GetTripsRequest, GetTripsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTripsRequest, GetTripsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateTrip(rental.v1.UpdateTripRequest) returns (rental.v1.Trip);
     */
    updateTrip(input: UpdateTripRequest, options?: RpcOptions): UnaryCall<UpdateTripRequest, Trip> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTripRequest, Trip>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service rental.v1.ProfileService
 */
export interface IProfileServiceClient {
    /**
     * @generated from protobuf rpc: GetProfile(rental.v1.GetProfileRequest) returns (rental.v1.Profile);
     */
    getProfile(input: GetProfileRequest, options?: RpcOptions): UnaryCall<GetProfileRequest, Profile>;
    /**
     * @generated from protobuf rpc: SubmitProfile(rental.v1.Identity) returns (rental.v1.Profile);
     */
    submitProfile(input: Identity, options?: RpcOptions): UnaryCall<Identity, Profile>;
    /**
     * @generated from protobuf rpc: ClearProfile(rental.v1.ClearProfileRequest) returns (rental.v1.Profile);
     */
    clearProfile(input: ClearProfileRequest, options?: RpcOptions): UnaryCall<ClearProfileRequest, Profile>;
}
/**
 * @generated from protobuf service rental.v1.ProfileService
 */
export class ProfileServiceClient implements IProfileServiceClient, ServiceInfo {
    typeName = ProfileService.typeName;
    methods = ProfileService.methods;
    options = ProfileService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetProfile(rental.v1.GetProfileRequest) returns (rental.v1.Profile);
     */
    getProfile(input: GetProfileRequest, options?: RpcOptions): UnaryCall<GetProfileRequest, Profile> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetProfileRequest, Profile>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SubmitProfile(rental.v1.Identity) returns (rental.v1.Profile);
     */
    submitProfile(input: Identity, options?: RpcOptions): UnaryCall<Identity, Profile> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Identity, Profile>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ClearProfile(rental.v1.ClearProfileRequest) returns (rental.v1.Profile);
     */
    clearProfile(input: ClearProfileRequest, options?: RpcOptions): UnaryCall<ClearProfileRequest, Profile> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ClearProfileRequest, Profile>("unary", this._transport, method, opt, input);
    }
}

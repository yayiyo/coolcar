// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "trip.proto" (package "coolcar", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TripService } from "./trip";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetTripResponse } from "./trip";
import type { GetTripRequest } from "./trip";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service coolcar.TripService
 */
export interface ITripServiceClient {
    /**
     * @generated from protobuf rpc: GetTrip(coolcar.GetTripRequest) returns (coolcar.GetTripResponse);
     */
    getTrip(input: GetTripRequest, options?: RpcOptions): UnaryCall<GetTripRequest, GetTripResponse>;
}
/**
 * @generated from protobuf service coolcar.TripService
 */
export class TripServiceClient implements ITripServiceClient, ServiceInfo {
    typeName = TripService.typeName;
    methods = TripService.methods;
    options = TripService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetTrip(coolcar.GetTripRequest) returns (coolcar.GetTripResponse);
     */
    getTrip(input: GetTripRequest, options?: RpcOptions): UnaryCall<GetTripRequest, GetTripResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTripRequest, GetTripResponse>("unary", this._transport, method, opt, input);
    }
}

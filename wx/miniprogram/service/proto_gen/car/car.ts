// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "car.proto" (package "car.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message car.v1.CarEntity
 */
export interface CarEntity {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: car.v1.Car car = 2;
     */
    car?: Car;
}
/**
 * @generated from protobuf message car.v1.Driver
 */
export interface Driver {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string avatar_url = 2;
     */
    avatarUrl: string;
}
/**
 * @generated from protobuf message car.v1.Location
 */
export interface Location {
    /**
     * @generated from protobuf field: double latitude = 1;
     */
    latitude: number;
    /**
     * @generated from protobuf field: double longitude = 2;
     */
    longitude: number;
}
/**
 * @generated from protobuf message car.v1.Car
 */
export interface Car {
    /**
     * @generated from protobuf field: car.v1.CarStatus status = 1;
     */
    status: CarStatus;
    /**
     * @generated from protobuf field: car.v1.Driver driver = 2;
     */
    driver?: Driver;
    /**
     * @generated from protobuf field: car.v1.Location position = 3;
     */
    position?: Location;
    /**
     * @generated from protobuf field: string trip_id = 4;
     */
    tripId: string;
}
/**
 * @generated from protobuf message car.v1.CreateCarRequest
 */
export interface CreateCarRequest {
    /**
     * @generated from protobuf field: car.v1.Car car = 1;
     */
    car?: Car;
}
/**
 * @generated from protobuf message car.v1.GetCarRequest
 */
export interface GetCarRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message car.v1.GetCarsRequest
 */
export interface GetCarsRequest {
}
/**
 * @generated from protobuf message car.v1.GetCarsResponse
 */
export interface GetCarsResponse {
    /**
     * @generated from protobuf field: repeated car.v1.CarEntity cars = 1;
     */
    cars: CarEntity[];
}
/**
 * @generated from protobuf message car.v1.LockCarRequest
 */
export interface LockCarRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message car.v1.LockCarResponse
 */
export interface LockCarResponse {
}
/**
 * @generated from protobuf message car.v1.UnlockCarRequest
 */
export interface UnlockCarRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: car.v1.Driver driver = 2;
     */
    driver?: Driver;
    /**
     * @generated from protobuf field: string trip_id = 3;
     */
    tripId: string;
}
/**
 * @generated from protobuf message car.v1.UnlockCarResponse
 */
export interface UnlockCarResponse {
}
/**
 * @generated from protobuf message car.v1.UpdateCarRequest
 */
export interface UpdateCarRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: car.v1.CarStatus status = 2;
     */
    status: CarStatus;
    /**
     * @generated from protobuf field: car.v1.Location position = 3;
     */
    position?: Location;
}
/**
 * @generated from protobuf message car.v1.UpdateCarResponse
 */
export interface UpdateCarResponse {
}
/**
 * @generated from protobuf enum car.v1.CarStatus
 */
export enum CarStatus {
    /**
     * @generated from protobuf enum value: CS_NOT_SPECIFIED = 0;
     */
    CS_NOT_SPECIFIED = 0,
    /**
     * @generated from protobuf enum value: LOCKED = 1;
     */
    LOCKED = 1,
    /**
     * @generated from protobuf enum value: UNLOCKING = 2;
     */
    UNLOCKING = 2,
    /**
     * @generated from protobuf enum value: UNLOCKED = 3;
     */
    UNLOCKED = 3,
    /**
     * @generated from protobuf enum value: LOCKING = 4;
     */
    LOCKING = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class CarEntity$Type extends MessageType<CarEntity> {
    constructor() {
        super("car.v1.CarEntity", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "car", kind: "message", T: () => Car }
        ]);
    }
    create(value?: PartialMessage<CarEntity>): CarEntity {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CarEntity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CarEntity): CarEntity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* car.v1.Car car */ 2:
                    message.car = Car.internalBinaryRead(reader, reader.uint32(), options, message.car);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CarEntity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* car.v1.Car car = 2; */
        if (message.car)
            Car.internalBinaryWrite(message.car, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.v1.CarEntity
 */
export const CarEntity = new CarEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Driver$Type extends MessageType<Driver> {
    constructor() {
        super("car.v1.Driver", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "avatar_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Driver>): Driver {
        const message = { id: "", avatarUrl: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Driver>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Driver): Driver {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string avatar_url */ 2:
                    message.avatarUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Driver, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string avatar_url = 2; */
        if (message.avatarUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.avatarUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.v1.Driver
 */
export const Driver = new Driver$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Location$Type extends MessageType<Location> {
    constructor() {
        super("car.v1.Location", [
            { no: 1, name: "latitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "longitude", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Location>): Location {
        const message = { latitude: 0, longitude: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Location>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Location): Location {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double latitude */ 1:
                    message.latitude = reader.double();
                    break;
                case /* double longitude */ 2:
                    message.longitude = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Location, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double latitude = 1; */
        if (message.latitude !== 0)
            writer.tag(1, WireType.Bit64).double(message.latitude);
        /* double longitude = 2; */
        if (message.longitude !== 0)
            writer.tag(2, WireType.Bit64).double(message.longitude);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.v1.Location
 */
export const Location = new Location$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Car$Type extends MessageType<Car> {
    constructor() {
        super("car.v1.Car", [
            { no: 1, name: "status", kind: "enum", T: () => ["car.v1.CarStatus", CarStatus] },
            { no: 2, name: "driver", kind: "message", T: () => Driver },
            { no: 3, name: "position", kind: "message", T: () => Location },
            { no: 4, name: "trip_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Car>): Car {
        const message = { status: 0, tripId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Car>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Car): Car {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* car.v1.CarStatus status */ 1:
                    message.status = reader.int32();
                    break;
                case /* car.v1.Driver driver */ 2:
                    message.driver = Driver.internalBinaryRead(reader, reader.uint32(), options, message.driver);
                    break;
                case /* car.v1.Location position */ 3:
                    message.position = Location.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* string trip_id */ 4:
                    message.tripId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Car, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* car.v1.CarStatus status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* car.v1.Driver driver = 2; */
        if (message.driver)
            Driver.internalBinaryWrite(message.driver, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* car.v1.Location position = 3; */
        if (message.position)
            Location.internalBinaryWrite(message.position, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string trip_id = 4; */
        if (message.tripId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tripId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.v1.Car
 */
export const Car = new Car$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateCarRequest$Type extends MessageType<CreateCarRequest> {
    constructor() {
        super("car.v1.CreateCarRequest", [
            { no: 1, name: "car", kind: "message", T: () => Car }
        ]);
    }
    create(value?: PartialMessage<CreateCarRequest>): CreateCarRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateCarRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateCarRequest): CreateCarRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* car.v1.Car car */ 1:
                    message.car = Car.internalBinaryRead(reader, reader.uint32(), options, message.car);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateCarRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* car.v1.Car car = 1; */
        if (message.car)
            Car.internalBinaryWrite(message.car, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.v1.CreateCarRequest
 */
export const CreateCarRequest = new CreateCarRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCarRequest$Type extends MessageType<GetCarRequest> {
    constructor() {
        super("car.v1.GetCarRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetCarRequest>): GetCarRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCarRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCarRequest): GetCarRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCarRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.v1.GetCarRequest
 */
export const GetCarRequest = new GetCarRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCarsRequest$Type extends MessageType<GetCarsRequest> {
    constructor() {
        super("car.v1.GetCarsRequest", []);
    }
    create(value?: PartialMessage<GetCarsRequest>): GetCarsRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCarsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCarsRequest): GetCarsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetCarsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.v1.GetCarsRequest
 */
export const GetCarsRequest = new GetCarsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCarsResponse$Type extends MessageType<GetCarsResponse> {
    constructor() {
        super("car.v1.GetCarsResponse", [
            { no: 1, name: "cars", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => CarEntity }
        ]);
    }
    create(value?: PartialMessage<GetCarsResponse>): GetCarsResponse {
        const message = { cars: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCarsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCarsResponse): GetCarsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated car.v1.CarEntity cars */ 1:
                    message.cars.push(CarEntity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCarsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated car.v1.CarEntity cars = 1; */
        for (let i = 0; i < message.cars.length; i++)
            CarEntity.internalBinaryWrite(message.cars[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.v1.GetCarsResponse
 */
export const GetCarsResponse = new GetCarsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LockCarRequest$Type extends MessageType<LockCarRequest> {
    constructor() {
        super("car.v1.LockCarRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LockCarRequest>): LockCarRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LockCarRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LockCarRequest): LockCarRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LockCarRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.v1.LockCarRequest
 */
export const LockCarRequest = new LockCarRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LockCarResponse$Type extends MessageType<LockCarResponse> {
    constructor() {
        super("car.v1.LockCarResponse", []);
    }
    create(value?: PartialMessage<LockCarResponse>): LockCarResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LockCarResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LockCarResponse): LockCarResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LockCarResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.v1.LockCarResponse
 */
export const LockCarResponse = new LockCarResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnlockCarRequest$Type extends MessageType<UnlockCarRequest> {
    constructor() {
        super("car.v1.UnlockCarRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "driver", kind: "message", T: () => Driver },
            { no: 3, name: "trip_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UnlockCarRequest>): UnlockCarRequest {
        const message = { id: "", tripId: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnlockCarRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnlockCarRequest): UnlockCarRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* car.v1.Driver driver */ 2:
                    message.driver = Driver.internalBinaryRead(reader, reader.uint32(), options, message.driver);
                    break;
                case /* string trip_id */ 3:
                    message.tripId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnlockCarRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* car.v1.Driver driver = 2; */
        if (message.driver)
            Driver.internalBinaryWrite(message.driver, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string trip_id = 3; */
        if (message.tripId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.tripId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.v1.UnlockCarRequest
 */
export const UnlockCarRequest = new UnlockCarRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnlockCarResponse$Type extends MessageType<UnlockCarResponse> {
    constructor() {
        super("car.v1.UnlockCarResponse", []);
    }
    create(value?: PartialMessage<UnlockCarResponse>): UnlockCarResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnlockCarResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnlockCarResponse): UnlockCarResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UnlockCarResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.v1.UnlockCarResponse
 */
export const UnlockCarResponse = new UnlockCarResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCarRequest$Type extends MessageType<UpdateCarRequest> {
    constructor() {
        super("car.v1.UpdateCarRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["car.v1.CarStatus", CarStatus] },
            { no: 3, name: "position", kind: "message", T: () => Location }
        ]);
    }
    create(value?: PartialMessage<UpdateCarRequest>): UpdateCarRequest {
        const message = { id: "", status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateCarRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCarRequest): UpdateCarRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* car.v1.CarStatus status */ 2:
                    message.status = reader.int32();
                    break;
                case /* car.v1.Location position */ 3:
                    message.position = Location.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateCarRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* car.v1.CarStatus status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* car.v1.Location position = 3; */
        if (message.position)
            Location.internalBinaryWrite(message.position, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.v1.UpdateCarRequest
 */
export const UpdateCarRequest = new UpdateCarRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateCarResponse$Type extends MessageType<UpdateCarResponse> {
    constructor() {
        super("car.v1.UpdateCarResponse", []);
    }
    create(value?: PartialMessage<UpdateCarResponse>): UpdateCarResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateCarResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateCarResponse): UpdateCarResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: UpdateCarResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message car.v1.UpdateCarResponse
 */
export const UpdateCarResponse = new UpdateCarResponse$Type();
/**
 * @generated ServiceType for protobuf service car.v1.CarService
 */
export const CarService = new ServiceType("car.v1.CarService", [
    { name: "CreateCar", options: {}, I: CreateCarRequest, O: CarEntity },
    { name: "GetCar", options: {}, I: GetCarRequest, O: Car },
    { name: "GetCars", options: {}, I: GetCarsRequest, O: GetCarsResponse },
    { name: "LockCar", options: {}, I: LockCarRequest, O: LockCarResponse },
    { name: "UnlockCar", options: {}, I: UnlockCarRequest, O: UnlockCarResponse },
    { name: "UpdateCar", options: {}, I: UpdateCarRequest, O: UpdateCarResponse }
]);
